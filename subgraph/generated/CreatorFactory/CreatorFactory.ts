// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewFragmentPool extends ethereum.Event {
  get params(): NewFragmentPool__Params {
    return new NewFragmentPool__Params(this);
  }
}

export class NewFragmentPool__Params {
  _event: NewFragmentPool;

  constructor(event: NewFragmentPool) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get instance(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get userId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get underlyingAsset(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get market(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fragmentToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class CreatorFactory extends ethereum.SmartContract {
  static bind(address: Address): CreatorFactory {
    return new CreatorFactory("CreatorFactory", address);
  }

  createPool(underlyingAsset: Address, lensId: BigInt): Address {
    let result = super.call(
      "createPool",
      "createPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(lensId)
      ]
    );

    return result[0].toAddress();
  }

  try_createPool(
    underlyingAsset: Address,
    lensId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromUnsignedBigInt(lensId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getManager(): Address {
    let result = super.call("getManager", "getManager():(address)", []);

    return result[0].toAddress();
  }

  try_getManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("getManager", "getManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPool(user: Address): Address {
    let result = super.call("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toAddress();
  }

  try_getPool(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lensId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get instance(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
